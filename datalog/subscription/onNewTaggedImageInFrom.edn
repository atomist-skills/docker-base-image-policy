[:find
 (pull
  ?commit
  [:schema/entity-type
   {:git.commit/repo [:git.repo/name
                      :git.repo/default-branch
                      {:git.repo/org [:github.org/installation-token
                                      :git.org/name
                                      (:git.org/provider-base-url
                                       :as
                                       :base-url)
                                      :git.provider/url]}]}
   {:git.commit/author [:git.user/name
                        :git.user/login
                        {:git.user/emails [:email.email/address]}]}
   :git.commit/sha
   :git.commit/message])
 (pull
  ?base-image
  [:schema/entity-type
   :docker.image/image
   :docker.image/sha
   :docker.image/digest
   :docker.image/tags
   {(:docker.manifest-list/_images
     as
     :docker.manifest-list/manifest-list) [:docker.manifest-list/digest
                                           :docker.manifest-list/tags
                                           {:docker.manifest-list/repository [:docker.repository/host
                                                                              (:docker.repository/repository
                                                                               :as
                                                                               :name)]}]}
   {:docker.image/repository [:docker.repository/host
                              (:docker.repository/repository
                               :as
                               :name)]}])
 (pull ?docker-file [:schema/entity-type :docker.file/path])
 :in
 $
 $before-db
 %
 :where
 (tx-entity-attr-value :docker.image/layers ?base-image _)

 [?base-image :docker.image/tags ?tag]

 ;; head commits
 [?ref :git.ref/commit ?commit]
 (is-default-branch? ?ref)
 ;; check repo filter
 [?commit :git.commit/repo ?repo]
 (repo-selected? ?repo)

 ;; associated Dockerfiles with the same tag as base-image
 [?docker-file :docker.file/commits ?commit]
 [?from-line :docker.file.line/file ?docker-file]
 [?from-line :docker.file.line/instruction "FROM"]
 [?from-line :docker.file.from/repository _]
 [?from-line :docker.file.from/tag ?tag]

 ;; either the digest is not present in the dockerfile, or it's a different one
 [?base-image :docker.image/digest ?digest]
 (or-join [?from-line ?digest]
   [(missing? $ ?from-line :docker.file.from/digest)]
   (not [?from-line :docker.file.from/digest ?digest]))]
