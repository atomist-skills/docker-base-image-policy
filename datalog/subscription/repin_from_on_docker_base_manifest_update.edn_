[:find
 (pull
   ?commit
   [:schema/entity-type
    {:git.commit/repo [:git.repo/name
                       :git.repo/default-branch
                       {:git.repo/org [:github.org/installation-token
                                       :git.org/name
                                       (:git.org/provider-base-url
                                         :as
                                         :base-url)
                                       :git.provider/url]}]}
    {:git.commit/author [:git.user/name
                         :git.user/login
                         {:git.user/emails [:email.email/address]}]}
    :git.commit/sha
    :git.commit/message])
 (pull
   ?new-manifest
   [:schema/entity-type
    :docker.manifest-list/sha
    :docker.manifest-list/digest
    :docker.manifest-list/tags
    {:docker.manifest-list/repository [:docker.repository/host
                                       (:docker.repository/repository
                                         :as
                                         :name)]}])
 (pull ?docker-file [:schema/entity-type :docker.file/path])
 :in $ $before-db %
 :where
 (tx-entity-attr-value :docker.manifest-list/digest ?new-manifest ?new-manifest-digest)

 [?new-manifest :docker.manifest-list/tags ?new-manifest-tag]
 [?new-manifest :docker.manifest-list/repository ?new-manifest-repository]

 ;; base manifest-list with different digest
 [?base-manifest :docker.manifest-list/tags ?new-manifest-tag]
 [?base-manifest :docker.manifest-list/repository ?new-manifest-repository]
 (not [?base-image :docker.manifest-list/digest ?new-manifest-digest])

 ;; get all from instructions that use the base-manifest
 [?from-line :docker.file.from/manifest-list ?base-manifest]
 [?from-line :docker.file.from/digest _]

 ;; get the dockerfile path
 [?from-line :docker.file.line/file ?docker-file]
 [?image :docker.image/docker-file ?docker-file]

 [?image :docker.image/sha ?sha]
 [?commit :git.commit/sha ?sha]
 [?ref :git.ref/commit ?commit]
 (is-default-branch? ?ref)
 (repo-selected? ?repo)
 ]
