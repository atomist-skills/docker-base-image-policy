import { Contextual, subscription } from "@atomist/skill";
import * as _ from "lodash";

export type Vulnerability = {
	sourceId: string;
	severity: subscription.datalog.DockerImageVulnerabilitySeverity;
	cvssScore: string;
};

export const retrieveVulnerabilities = _.memoize(_retrieveVulnerabilities);

async function _retrieveVulnerabilities(
	digest: string,
	ctx: Contextual<any, any>,
): Promise<Vulnerability[]> {
	const query = `[:find
 (pull
  ?image
  [:schema/entity-type
   {:docker.analysis/vulnerabilities [:vulnerability.cve/source-id
                                      :vulnerability.cve/severity
                                      :vulnerability.cve/cvss-score]}])
 :in
 $
 $before-db
 %
 :where
 [?image
  :docker.image/digest ?digest]]`;

	const vuls = await ctx.datalog.query<
		{ image: { vulnerabilities: Vulnerability[] } },
		{ digest: string }
	>(query, { digest });
	towreturn(vuls[0] as any)?.image?.vulnerabilities;
}
